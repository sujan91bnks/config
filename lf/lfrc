# Basic Settings
set preview true
set hidden true
# set drawbox true

# Custom Functions
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) vim "$f";;
        *) open "$f" ;;
    esac
}}

cmd mk ${{
  printf "File/Folder: "
  read path
  if [[ $path =~ "/" ]]; then
      mkdir ${path%?}
  else
      touch $path
  fi
  clear
}}

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

cmd stripspace %stripspace "$f"

cmd yank_path ${{
  echo $PWD | pbcopy
}}

# Bindings
# Remove some defaults
map m
map o
map n
map r
map "'"
map '"'
map d
map c
map e
map f

# File Openers
map ee nvim "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

map ss stripspace

# Basic Functions
map . set hidden!
map dd delete
map p paste
map Y yank_path
map x cut
map y copy
# map <c-d> fzf_jump
map <enter> open
map mk mk
map ch chmod
map mm rename
map R reload
map C clear
map U unselect
map <c-c> quit

map gd cd ~/Downloads
map gD cd ~/Desktop
map gp cd ~/Projects
map go cd ~/OpenSourceProjects
map ge cd ~/Desktop
map gc cd ~/.config
map gH cd /opt/homebrew
